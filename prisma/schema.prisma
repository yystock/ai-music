generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum Status {
    pending
    completed
    failed
}

model UserRequest {
    id        String   @id @default(cuid())
    userId    String
    email     String
    task      String
    source    String
    to        String
    request   String
    songs     Song[]   @relation("RequestedSongs")
    results   Song[]   @relation("ResultSongs")
    result    String   @db.Text
    status    Status   @default(pending)
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [userId])

    @@index([id])
    @@index([userId])
}

model Song {
    songId      String        @id @default(cuid())
    id          String
    name        String
    artist      String
    imageUrl    String?
    previewUrl  String?
    requestedIn UserRequest[] @relation("RequestedSongs") // Relation 1
    resultedIn  UserRequest[] @relation("ResultSongs")
}

enum Role {
    user
    paid
    admin
}

// model UserApiLimit {
//   id        String      @id @default(cuid())
//   userId    String   @unique
//   count     Int      @default(0)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model User {
    id                     String        @id @default(cuid())
    email                  String        @unique
    userId                 String        @unique
    credits                Int           @default(5)
    stripeCustomerId       String?       @unique @map(name: "stripe_customer_id")
    stripeSubscriptionId   String?       @unique @map(name: "stripe_subscription_id")
    stripePriceId          String?       @map(name: "stripe_price_id")
    stripeCurrentPeriodEnd DateTime?     @map(name: "stripe_current_period_end")
    role                   Role          @default(user)
    request                UserRequest[]
}
